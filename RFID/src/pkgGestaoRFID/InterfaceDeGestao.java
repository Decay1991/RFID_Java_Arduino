package pkgGestaoRFID;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class InterfaceDeGestao extends javax.swing.JFrame {

    //CHAMAR A CLASSE PARA O SEGUNDO ARDUINO
    //public ControlePortaLigaLed arduino2;
    //public ComunicacaoSerial arduino;
    // variáveis globais
    String url = "jdbc:derby://localhost:1527/embebidos";
    Connection con;
    String sql;
    DefaultTableModel model;

    int ExisteEvento = 0;

    String rfidSeleccionado = "";
    
    //VARIVAVEL PARA PASSAR O ESTADO DO LED
    int LedQueLigamos = 0;
    
    //VARIAVEIS PARA A PARTE DO UPDATE
    String nomeRFIDUpdate = ""; //GUARDA O NOME DO RFID
    int idRfidUpdate = 0; //GUARDA O ID DO RFID QUE VAMOS EDITAR
    
    
    

    public InterfaceDeGestao() {
        initComponents();
        this.setVisible(true);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDautores = new javax.swing.JDialog();
        jPautores = new javax.swing.JPanel();
        jLBLtitulo = new javax.swing.JLabel();
        jPinformacoes = new javax.swing.JPanel();
        jLBLanoLetivo = new javax.swing.JLabel();
        jLBLfotoBruno = new javax.swing.JLabel();
        jLBLuc = new javax.swing.JLabel();
        jLBLfotoRafael = new javax.swing.JLabel();
        jPdadosalunos = new javax.swing.JPanel();
        jLBLnomeRafael = new javax.swing.JLabel();
        jLBLnumeroRafael = new javax.swing.JLabel();
        jLBLnome = new javax.swing.JLabel();
        jLBLnumero = new javax.swing.JLabel();
        jBTok = new javax.swing.JButton();
        jDregistar = new javax.swing.JDialog();
        jPregistar = new javax.swing.JPanel();
        jPinvisivel = new javax.swing.JPanel();
        jPdadosRegisto = new javax.swing.JPanel();
        jLBLrfid = new javax.swing.JLabel();
        jLBLname = new javax.swing.JLabel();
        jLBLestado = new javax.swing.JLabel();
        jTFrfid = new javax.swing.JTextField();
        jTFnome = new javax.swing.JTextField();
        jCBestado = new javax.swing.JComboBox();
        jBTcancelar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jBTguardar = new javax.swing.JButton();
        jBTAtualizar = new javax.swing.JButton();
        jDlistarRFID = new javax.swing.JDialog();
        jPlistar = new javax.swing.JPanel();
        jPtabela = new javax.swing.JPanel();
        jSPtabelaListar = new javax.swing.JScrollPane();
        jTlistaCartoes = new javax.swing.JTable();
        jBTvoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldPesquisar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxEstadoConsultas = new javax.swing.JComboBox();
        jPanelBotoesEstados = new javax.swing.JPanel();
        jButtonInativo = new javax.swing.JButton();
        jButtonDesvincular = new javax.swing.JButton();
        jButtonAtivar = new javax.swing.JButton();
        jButtonEvento = new javax.swing.JButton();
        jButtonEditarRfid = new javax.swing.JButton();
        jPanelEvento = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jComboBoxRFIDEvento = new javax.swing.JComboBox();
        jDNovoEvento = new javax.swing.JDialog();
        jPanelNovoEvento = new javax.swing.JPanel();
        jLabelNomeEvento = new javax.swing.JLabel();
        jLabelEstadoEvento = new javax.swing.JLabel();
        jTextFieldNomeEvento = new javax.swing.JTextField();
        jComboBoxEstadoEvento = new javax.swing.JComboBox();
        jBTguardarNovoEvento = new javax.swing.JButton();
        jBTcancelarNovoEvento = new javax.swing.JButton();
        jDListaEventos = new javax.swing.JDialog();
        jPlistarEventos = new javax.swing.JPanel();
        jPtabelaEventos = new javax.swing.JPanel();
        jSPtabelaListar1 = new javax.swing.JScrollPane();
        jTlistaEventos = new javax.swing.JTable();
        jBTvoltarEventos = new javax.swing.JButton();
        jLabelProcurarEvento = new javax.swing.JLabel();
        jTextFieldPesquisarEvento = new javax.swing.JTextField();
        jLabelEstado = new javax.swing.JLabel();
        jComboBoxEstadoConsultasEventos = new javax.swing.JComboBox();
        jPanelBotoesEstadosEventos = new javax.swing.JPanel();
        jButtonInativoEvento = new javax.swing.JButton();
        jButtonTerminarEvento = new javax.swing.JButton();
        jButtonAtivarEvento = new javax.swing.JButton();
        jDRFIDEvento = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jDListaRDIFEvento = new javax.swing.JDialog();
        jPanelRfidEvento = new javax.swing.JPanel();
        jComboBoxSeleccionaEventoConsulta = new javax.swing.JComboBox();
        jLabelEvento = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConsultaRfidEventos = new javax.swing.JTable();
        jButtonMaisInfo = new javax.swing.JButton();
        jBTvoltarRFIDEvento = new javax.swing.JButton();
        jPprincipal = new javax.swing.JPanel();
        jBTsair = new javax.swing.JButton();
        jPoutput = new javax.swing.JPanel();
        jLBLmsgVerifica = new javax.swing.JLabel();
        jPanelRFID = new javax.swing.JPanel();
        jBTlistarBD = new javax.swing.JButton();
        jPanelEventoF = new javax.swing.JPanel();
        jBTlistaEventos = new javax.swing.JButton();
        jBTNovoEvento = new javax.swing.JButton();
        jPanelRFIDEvento = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanelRealizadoPor = new javax.swing.JPanel();
        jBTautores = new javax.swing.JButton();

        jDautores.setTitle("AUTORES");
        jDautores.setMinimumSize(new java.awt.Dimension(500, 430));
        jDautores.setModal(true);

        jPautores.setBackground(new java.awt.Color(255, 255, 255));
        jPautores.setPreferredSize(new java.awt.Dimension(480, 480));

        jLBLtitulo.setFont(new java.awt.Font("Tw Cen MT", 1, 22)); // NOI18N
        jLBLtitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLtitulo.setText("MESTRADO EM COMPUTAÇÃO MÓVEL");

        jPinformacoes.setBackground(new java.awt.Color(255, 255, 255));

        jLBLanoLetivo.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLBLanoLetivo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLanoLetivo.setText("ANO LETIVO: 2013/2014");

        jLBLfotoBruno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/fotoBruno.jpg"))); // NOI18N
        jLBLfotoBruno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLBLuc.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLBLuc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLuc.setText("UNIDADE CURRICULAR: Sistemas Embebidos");
        jLBLuc.setToolTipText("");

        jLBLfotoRafael.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/fotoRafael.jpg"))); // NOI18N
        jLBLfotoRafael.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPdadosalunos.setBackground(new java.awt.Color(255, 255, 255));
        jPdadosalunos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLBLnomeRafael.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLBLnomeRafael.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLnomeRafael.setText("NOME: Bruno Rafael Cruz Oliveira");

        jLBLnumeroRafael.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLBLnumeroRafael.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLnumeroRafael.setText("NÚMERO: 1010136");

        jLBLnome.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLBLnome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLnome.setText("NOME: Bruno José Oliveira Almeida");

        jLBLnumero.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLBLnumero.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLnumero.setText("NÚMERO: 1009251");

        javax.swing.GroupLayout jPdadosalunosLayout = new javax.swing.GroupLayout(jPdadosalunos);
        jPdadosalunos.setLayout(jPdadosalunosLayout);
        jPdadosalunosLayout.setHorizontalGroup(
            jPdadosalunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 228, Short.MAX_VALUE)
            .addGroup(jPdadosalunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPdadosalunosLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPdadosalunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLBLnome, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                        .addComponent(jLBLnumero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLBLnumeroRafael, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLBLnomeRafael, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        jPdadosalunosLayout.setVerticalGroup(
            jPdadosalunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPdadosalunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPdadosalunosLayout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(jLBLnumero)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLBLnome)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLBLnumeroRafael)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLBLnomeRafael)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jBTok.setBackground(new java.awt.Color(0, 102, 102));
        jBTok.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBTok.setForeground(new java.awt.Color(255, 255, 255));
        jBTok.setText("OK");
        jBTok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTokActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPinformacoesLayout = new javax.swing.GroupLayout(jPinformacoes);
        jPinformacoes.setLayout(jPinformacoesLayout);
        jPinformacoesLayout.setHorizontalGroup(
            jPinformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPinformacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPinformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPinformacoesLayout.createSequentialGroup()
                        .addComponent(jLBLfotoBruno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPdadosalunos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLBLfotoRafael))
                    .addComponent(jLBLuc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLBLanoLetivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBTok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPinformacoesLayout.setVerticalGroup(
            jPinformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPinformacoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPinformacoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPdadosalunos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLBLfotoBruno, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLBLfotoRafael, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addComponent(jLBLuc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLBLanoLetivo)
                .addGap(18, 18, 18)
                .addComponent(jBTok, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPautoresLayout = new javax.swing.GroupLayout(jPautores);
        jPautores.setLayout(jPautoresLayout);
        jPautoresLayout.setHorizontalGroup(
            jPautoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPautoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPautoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLBLtitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPinformacoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPautoresLayout.setVerticalGroup(
            jPautoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPautoresLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLBLtitulo)
                .addGap(18, 18, 18)
                .addComponent(jPinformacoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDautoresLayout = new javax.swing.GroupLayout(jDautores.getContentPane());
        jDautores.getContentPane().setLayout(jDautoresLayout);
        jDautoresLayout.setHorizontalGroup(
            jDautoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPautores, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
        );
        jDautoresLayout.setVerticalGroup(
            jDautoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDautoresLayout.createSequentialGroup()
                .addComponent(jPautores, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 51, Short.MAX_VALUE))
        );

        jDregistar.setTitle("REGISTAR CARTÃO");
        jDregistar.setMinimumSize(new java.awt.Dimension(500, 320));
        jDregistar.setResizable(false);

        jPregistar.setBackground(new java.awt.Color(255, 255, 255));

        jPinvisivel.setBackground(new java.awt.Color(255, 255, 255));

        jPdadosRegisto.setBackground(new java.awt.Color(255, 255, 255));
        jPdadosRegisto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLBLrfid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLBLrfid.setText("RFID:");

        jLBLname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLBLname.setText("NOME:");

        jLBLestado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLBLestado.setText("ESTADO:");

        jTFrfid.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTFrfid.setEnabled(false);

        jTFnome.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jCBestado.setForeground(new java.awt.Color(102, 102, 102));
        jCBestado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Escolha uma opção", "Ativo", "Inativo", "Desvincular" }));

        javax.swing.GroupLayout jPdadosRegistoLayout = new javax.swing.GroupLayout(jPdadosRegisto);
        jPdadosRegisto.setLayout(jPdadosRegistoLayout);
        jPdadosRegistoLayout.setHorizontalGroup(
            jPdadosRegistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPdadosRegistoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPdadosRegistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLBLestado)
                    .addComponent(jLBLname, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLBLrfid, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPdadosRegistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTFnome)
                    .addComponent(jCBestado, 0, 313, Short.MAX_VALUE)
                    .addComponent(jTFrfid))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPdadosRegistoLayout.setVerticalGroup(
            jPdadosRegistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPdadosRegistoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPdadosRegistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLBLrfid)
                    .addComponent(jTFrfid, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPdadosRegistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLBLname)
                    .addComponent(jTFnome, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPdadosRegistoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLBLestado)
                    .addComponent(jCBestado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        jBTcancelar.setBackground(new java.awt.Color(0, 102, 102));
        jBTcancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBTcancelar.setForeground(new java.awt.Color(255, 255, 255));
        jBTcancelar.setText("CANCELAR");
        jBTcancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTcancelarActionPerformed(evt);
            }
        });

        jBTguardar.setBackground(new java.awt.Color(0, 102, 102));
        jBTguardar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBTguardar.setForeground(new java.awt.Color(255, 255, 255));
        jBTguardar.setText("GUARDAR");
        jBTguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTguardarActionPerformed(evt);
            }
        });

        jBTAtualizar.setBackground(new java.awt.Color(0, 102, 102));
        jBTAtualizar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBTAtualizar.setForeground(new java.awt.Color(255, 255, 255));
        jBTAtualizar.setText("Atualizar");
        jBTAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBTguardar, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBTAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTguardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPinvisivelLayout = new javax.swing.GroupLayout(jPinvisivel);
        jPinvisivel.setLayout(jPinvisivelLayout);
        jPinvisivelLayout.setHorizontalGroup(
            jPinvisivelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPinvisivelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPinvisivelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPinvisivelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBTcancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPdadosRegisto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPinvisivelLayout.setVerticalGroup(
            jPinvisivelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPinvisivelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPdadosRegisto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPinvisivelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPinvisivelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jBTcancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPregistarLayout = new javax.swing.GroupLayout(jPregistar);
        jPregistar.setLayout(jPregistarLayout);
        jPregistarLayout.setHorizontalGroup(
            jPregistarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPregistarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPinvisivel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPregistarLayout.setVerticalGroup(
            jPregistarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPregistarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPinvisivel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(141, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDregistarLayout = new javax.swing.GroupLayout(jDregistar.getContentPane());
        jDregistar.getContentPane().setLayout(jDregistarLayout);
        jDregistarLayout.setHorizontalGroup(
            jDregistarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDregistarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPregistar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDregistarLayout.setVerticalGroup(
            jDregistarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDregistarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPregistar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jDlistarRFID.setTitle("MOSTRAR CARTÕES");
        jDlistarRFID.setMinimumSize(new java.awt.Dimension(800, 500));

        jPlistar.setBackground(new java.awt.Color(255, 255, 255));

        jPtabela.setBackground(new java.awt.Color(255, 255, 255));

        jTlistaCartoes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTlistaCartoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RFID", "NOME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jSPtabelaListar.setViewportView(jTlistaCartoes);
        if (jTlistaCartoes.getColumnModel().getColumnCount() > 0) {
            jTlistaCartoes.getColumnModel().getColumn(0).setHeaderValue("RFID");
        }

        jBTvoltar.setBackground(new java.awt.Color(0, 102, 102));
        jBTvoltar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBTvoltar.setForeground(new java.awt.Color(255, 255, 255));
        jBTvoltar.setText("VOLTAR");
        jBTvoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTvoltarActionPerformed(evt);
            }
        });

        jLabel1.setText("Procurar");

        jTextFieldPesquisar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldPesquisarCaretUpdate(evt);
            }
        });

        jLabel2.setText("Estado");

        jComboBoxEstadoConsultas.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ativo", "Inativo", "Desvincular" }));
        jComboBoxEstadoConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstadoConsultasActionPerformed(evt);
            }
        });

        jButtonInativo.setText("Inativar");
        jButtonInativo.setPreferredSize(new java.awt.Dimension(87, 23));
        jButtonInativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInativoActionPerformed(evt);
            }
        });

        jButtonDesvincular.setText("Desvincular");
        jButtonDesvincular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDesvincularActionPerformed(evt);
            }
        });

        jButtonAtivar.setText("Ativar");
        jButtonAtivar.setPreferredSize(new java.awt.Dimension(87, 23));
        jButtonAtivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtivarActionPerformed(evt);
            }
        });

        jButtonEvento.setText("Evento");
        jButtonEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEventoActionPerformed(evt);
            }
        });

        jButtonEditarRfid.setText("Editar");
        jButtonEditarRfid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarRfidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBotoesEstadosLayout = new javax.swing.GroupLayout(jPanelBotoesEstados);
        jPanelBotoesEstados.setLayout(jPanelBotoesEstadosLayout);
        jPanelBotoesEstadosLayout.setHorizontalGroup(
            jPanelBotoesEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoesEstadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAtivar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jButtonInativo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDesvincular)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEvento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonEditarRfid))
        );
        jPanelBotoesEstadosLayout.setVerticalGroup(
            jPanelBotoesEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoesEstadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBotoesEstadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInativo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDesvincular)
                    .addComponent(jButtonAtivar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonEvento)
                    .addComponent(jButtonEditarRfid))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPtabelaLayout = new javax.swing.GroupLayout(jPtabela);
        jPtabela.setLayout(jPtabelaLayout);
        jPtabelaLayout.setHorizontalGroup(
            jPtabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPtabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPtabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSPtabelaListar)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPtabelaLayout.createSequentialGroup()
                        .addComponent(jPanelBotoesEstados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBTvoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPtabelaLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxEstadoConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPtabelaLayout.setVerticalGroup(
            jPtabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPtabelaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPtabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxEstadoConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSPtabelaListar, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPtabelaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelBotoesEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTvoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );

        jButton1.setText("Adicionar a Evento");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBoxRFIDEvento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxRFIDEvento.setToolTipText("");
        jComboBoxRFIDEvento.setMaximumSize(new java.awt.Dimension(60, 32767));

        javax.swing.GroupLayout jPanelEventoLayout = new javax.swing.GroupLayout(jPanelEvento);
        jPanelEvento.setLayout(jPanelEventoLayout);
        jPanelEventoLayout.setHorizontalGroup(
            jPanelEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEventoLayout.createSequentialGroup()
                .addGroup(jPanelEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxRFIDEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );
        jPanelEventoLayout.setVerticalGroup(
            jPanelEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelEventoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxRFIDEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout jPlistarLayout = new javax.swing.GroupLayout(jPlistar);
        jPlistar.setLayout(jPlistarLayout);
        jPlistarLayout.setHorizontalGroup(
            jPlistarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlistarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPtabela, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPlistarLayout.setVerticalGroup(
            jPlistarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlistarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPtabela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPlistarLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jPanelEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDlistarRFIDLayout = new javax.swing.GroupLayout(jDlistarRFID.getContentPane());
        jDlistarRFID.getContentPane().setLayout(jDlistarRFIDLayout);
        jDlistarRFIDLayout.setHorizontalGroup(
            jDlistarRFIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDlistarRFIDLayout.createSequentialGroup()
                .addComponent(jPlistar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDlistarRFIDLayout.setVerticalGroup(
            jDlistarRFIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPlistar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jDNovoEvento.setTitle("NOVO EVENTO");
        jDNovoEvento.setMinimumSize(new java.awt.Dimension(373, 274));

        jPanelNovoEvento.setBorder(javax.swing.BorderFactory.createTitledBorder("Novo Evento"));

        jLabelNomeEvento.setText("Evento");

        jLabelEstadoEvento.setText("Estado");

        jComboBoxEstadoEvento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Escolha uma opção", "Ativo", "Inativo", "Terminado" }));

        jBTguardarNovoEvento.setBackground(new java.awt.Color(0, 102, 102));
        jBTguardarNovoEvento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBTguardarNovoEvento.setForeground(new java.awt.Color(255, 255, 255));
        jBTguardarNovoEvento.setText("GUARDAR");
        jBTguardarNovoEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTguardarNovoEventoActionPerformed(evt);
            }
        });

        jBTcancelarNovoEvento.setBackground(new java.awt.Color(0, 102, 102));
        jBTcancelarNovoEvento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jBTcancelarNovoEvento.setForeground(new java.awt.Color(255, 255, 255));
        jBTcancelarNovoEvento.setText("VOLTAR");
        jBTcancelarNovoEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTcancelarNovoEventoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelNovoEventoLayout = new javax.swing.GroupLayout(jPanelNovoEvento);
        jPanelNovoEvento.setLayout(jPanelNovoEventoLayout);
        jPanelNovoEventoLayout.setHorizontalGroup(
            jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovoEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanelNovoEventoLayout.createSequentialGroup()
                        .addGroup(jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNomeEvento)
                            .addComponent(jLabelEstadoEvento))
                        .addGap(27, 27, 27)
                        .addGroup(jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxEstadoEvento, 0, 208, Short.MAX_VALUE)
                            .addComponent(jTextFieldNomeEvento)))
                    .addGroup(jPanelNovoEventoLayout.createSequentialGroup()
                        .addComponent(jBTguardarNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(jBTcancelarNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanelNovoEventoLayout.setVerticalGroup(
            jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelNovoEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNomeEvento)
                    .addComponent(jTextFieldNomeEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEstadoEvento)
                    .addComponent(jComboBoxEstadoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanelNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTcancelarNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTguardarNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jDNovoEventoLayout = new javax.swing.GroupLayout(jDNovoEvento.getContentPane());
        jDNovoEvento.getContentPane().setLayout(jDNovoEventoLayout);
        jDNovoEventoLayout.setHorizontalGroup(
            jDNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDNovoEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDNovoEventoLayout.setVerticalGroup(
            jDNovoEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDNovoEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jDListaEventos.setTitle("MOSTRA EVENTOS");
        jDListaEventos.setMinimumSize(new java.awt.Dimension(530, 410));

        jPlistarEventos.setBackground(new java.awt.Color(255, 255, 255));

        jPtabelaEventos.setBackground(new java.awt.Color(255, 255, 255));

        jTlistaEventos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTlistaEventos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOME"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jSPtabelaListar1.setViewportView(jTlistaEventos);

        jBTvoltarEventos.setBackground(new java.awt.Color(0, 102, 102));
        jBTvoltarEventos.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBTvoltarEventos.setForeground(new java.awt.Color(255, 255, 255));
        jBTvoltarEventos.setText("VOLTAR");
        jBTvoltarEventos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTvoltarEventosActionPerformed(evt);
            }
        });

        jLabelProcurarEvento.setText("Procurar");

        jTextFieldPesquisarEvento.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextFieldPesquisarEventoCaretUpdate(evt);
            }
        });

        jLabelEstado.setText("Estado");

        jComboBoxEstadoConsultasEventos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ativo", "Inativo", "Terminado" }));
        jComboBoxEstadoConsultasEventos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEstadoConsultasEventosActionPerformed(evt);
            }
        });

        jButtonInativoEvento.setText("Inativar");
        jButtonInativoEvento.setPreferredSize(new java.awt.Dimension(87, 23));
        jButtonInativoEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInativoEventoActionPerformed(evt);
            }
        });

        jButtonTerminarEvento.setText("Terminar");
        jButtonTerminarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTerminarEventoActionPerformed(evt);
            }
        });

        jButtonAtivarEvento.setText("Ativar");
        jButtonAtivarEvento.setPreferredSize(new java.awt.Dimension(87, 23));
        jButtonAtivarEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtivarEventoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBotoesEstadosEventosLayout = new javax.swing.GroupLayout(jPanelBotoesEstadosEventos);
        jPanelBotoesEstadosEventos.setLayout(jPanelBotoesEstadosEventosLayout);
        jPanelBotoesEstadosEventosLayout.setHorizontalGroup(
            jPanelBotoesEstadosEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoesEstadosEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBotoesEstadosEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAtivarEvento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonInativoEvento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonTerminarEvento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanelBotoesEstadosEventosLayout.setVerticalGroup(
            jPanelBotoesEstadosEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoesEstadosEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonAtivarEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonInativoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jButtonTerminarEvento)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPtabelaEventosLayout = new javax.swing.GroupLayout(jPtabelaEventos);
        jPtabelaEventos.setLayout(jPtabelaEventosLayout);
        jPtabelaEventosLayout.setHorizontalGroup(
            jPtabelaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPtabelaEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPtabelaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPtabelaEventosLayout.createSequentialGroup()
                        .addComponent(jLabelProcurarEvento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldPesquisarEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPtabelaEventosLayout.createSequentialGroup()
                        .addComponent(jSPtabelaListar1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPtabelaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPtabelaEventosLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPtabelaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelEstado)
                                    .addComponent(jPanelBotoesEstadosEventos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBoxEstadoConsultasEventos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPtabelaEventosLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jBTvoltarEventos, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(44, 44, 44))))
        );
        jPtabelaEventosLayout.setVerticalGroup(
            jPtabelaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPtabelaEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPtabelaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProcurarEvento)
                    .addComponent(jTextFieldPesquisarEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPtabelaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSPtabelaListar1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPtabelaEventosLayout.createSequentialGroup()
                        .addComponent(jLabelEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxEstadoConsultasEventos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelBotoesEstadosEventos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBTvoltarEventos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPlistarEventosLayout = new javax.swing.GroupLayout(jPlistarEventos);
        jPlistarEventos.setLayout(jPlistarEventosLayout);
        jPlistarEventosLayout.setHorizontalGroup(
            jPlistarEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlistarEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPtabelaEventos, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPlistarEventosLayout.setVerticalGroup(
            jPlistarEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlistarEventosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPtabelaEventos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jDListaEventosLayout = new javax.swing.GroupLayout(jDListaEventos.getContentPane());
        jDListaEventos.getContentPane().setLayout(jDListaEventosLayout);
        jDListaEventosLayout.setHorizontalGroup(
            jDListaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPlistarEventos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jDListaEventosLayout.setVerticalGroup(
            jDListaEventosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDListaEventosLayout.createSequentialGroup()
                .addComponent(jPlistarEventos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jDRFIDEvento.setTitle("RFID EVENTO");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 207, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDRFIDEventoLayout = new javax.swing.GroupLayout(jDRFIDEvento.getContentPane());
        jDRFIDEvento.getContentPane().setLayout(jDRFIDEventoLayout);
        jDRFIDEventoLayout.setHorizontalGroup(
            jDRFIDEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDRFIDEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jDRFIDEventoLayout.setVerticalGroup(
            jDRFIDEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDRFIDEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jDListaRDIFEvento.setTitle("MOSTRA RFID EVENTO");
        jDListaRDIFEvento.setMinimumSize(new java.awt.Dimension(400, 340));

        jComboBoxSeleccionaEventoConsulta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxSeleccionaEventoConsulta.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBoxSeleccionaEventoConsultaPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabelEvento.setText("Evento");

        jTableConsultaRfidEventos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableConsultaRfidEventos);

        jButtonMaisInfo.setText("Mais Infr.");
        jButtonMaisInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMaisInfoActionPerformed(evt);
            }
        });

        jBTvoltarRFIDEvento.setBackground(new java.awt.Color(0, 102, 102));
        jBTvoltarRFIDEvento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBTvoltarRFIDEvento.setForeground(new java.awt.Color(255, 255, 255));
        jBTvoltarRFIDEvento.setText("VOLTAR");
        jBTvoltarRFIDEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTvoltarRFIDEventoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRfidEventoLayout = new javax.swing.GroupLayout(jPanelRfidEvento);
        jPanelRfidEvento.setLayout(jPanelRfidEventoLayout);
        jPanelRfidEventoLayout.setHorizontalGroup(
            jPanelRfidEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRfidEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRfidEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBTvoltarRFIDEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelRfidEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanelRfidEventoLayout.createSequentialGroup()
                            .addComponent(jLabelEvento)
                            .addGap(18, 18, 18)
                            .addComponent(jComboBoxSeleccionaEventoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonMaisInfo))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanelRfidEventoLayout.setVerticalGroup(
            jPanelRfidEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRfidEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRfidEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxSeleccionaEventoConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEvento)
                    .addComponent(jButtonMaisInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBTvoltarRFIDEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jDListaRDIFEventoLayout = new javax.swing.GroupLayout(jDListaRDIFEvento.getContentPane());
        jDListaRDIFEvento.getContentPane().setLayout(jDListaRDIFEventoLayout);
        jDListaRDIFEventoLayout.setHorizontalGroup(
            jDListaRDIFEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDListaRDIFEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelRfidEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDListaRDIFEventoLayout.setVerticalGroup(
            jDListaRDIFEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDListaRDIFEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelRfidEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RFID MANAGEMENT");
        setMinimumSize(new java.awt.Dimension(507, 550));

        jPprincipal.setBackground(new java.awt.Color(255, 255, 255));
        jPprincipal.setPreferredSize(new java.awt.Dimension(502, 400));

        jBTsair.setBackground(new java.awt.Color(255, 255, 255));
        jBTsair.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        jBTsair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/sair.png"))); // NOI18N
        jBTsair.setToolTipText("Sair");
        jBTsair.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jBTsair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTsairActionPerformed(evt);
            }
        });

        jPoutput.setBackground(new java.awt.Color(255, 255, 255));
        jPoutput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLBLmsgVerifica.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLBLmsgVerifica.setForeground(new java.awt.Color(0, 102, 102));
        jLBLmsgVerifica.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLBLmsgVerifica.setText("POR FAVOR, PASSE O CARTÃO ...");

        javax.swing.GroupLayout jPoutputLayout = new javax.swing.GroupLayout(jPoutput);
        jPoutput.setLayout(jPoutputLayout);
        jPoutputLayout.setHorizontalGroup(
            jPoutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPoutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLBLmsgVerifica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPoutputLayout.setVerticalGroup(
            jPoutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPoutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLBLmsgVerifica, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelRFID.setBorder(javax.swing.BorderFactory.createTitledBorder("RFID"));

        jBTlistarBD.setBackground(new java.awt.Color(255, 255, 255));
        jBTlistarBD.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        jBTlistarBD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/listar.png"))); // NOI18N
        jBTlistarBD.setToolTipText("Listar");
        jBTlistarBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTlistarBDActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRFIDLayout = new javax.swing.GroupLayout(jPanelRFID);
        jPanelRFID.setLayout(jPanelRFIDLayout);
        jPanelRFIDLayout.setHorizontalGroup(
            jPanelRFIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRFIDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBTlistarBD)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRFIDLayout.setVerticalGroup(
            jPanelRFIDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRFIDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBTlistarBD, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanelEventoF.setBorder(javax.swing.BorderFactory.createTitledBorder("Eventos"));

        jBTlistaEventos.setBackground(new java.awt.Color(255, 255, 255));
        jBTlistaEventos.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        jBTlistaEventos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/listar.png"))); // NOI18N
        jBTlistaEventos.setToolTipText("Listar");
        jBTlistaEventos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTlistaEventosActionPerformed(evt);
            }
        });

        jBTNovoEvento.setBackground(new java.awt.Color(255, 255, 255));
        jBTNovoEvento.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        jBTNovoEvento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/evento.png"))); // NOI18N
        jBTNovoEvento.setToolTipText("Listar");
        jBTNovoEvento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTNovoEventoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelEventoFLayout = new javax.swing.GroupLayout(jPanelEventoF);
        jPanelEventoF.setLayout(jPanelEventoFLayout);
        jPanelEventoFLayout.setHorizontalGroup(
            jPanelEventoFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
            .addGroup(jPanelEventoFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelEventoFLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jBTNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jBTlistaEventos, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanelEventoFLayout.setVerticalGroup(
            jPanelEventoFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 152, Short.MAX_VALUE)
            .addGroup(jPanelEventoFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelEventoFLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanelEventoFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jBTlistaEventos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBTNovoEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanelRFIDEvento.setBorder(javax.swing.BorderFactory.createTitledBorder("RFID Eventos"));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/Lista_rfid_evento.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRFIDEventoLayout = new javax.swing.GroupLayout(jPanelRFIDEvento);
        jPanelRFIDEvento.setLayout(jPanelRFIDEventoLayout);
        jPanelRFIDEventoLayout.setHorizontalGroup(
            jPanelRFIDEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRFIDEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelRFIDEventoLayout.setVerticalGroup(
            jPanelRFIDEventoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRFIDEventoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelRealizadoPor.setBorder(javax.swing.BorderFactory.createTitledBorder("Feito por:"));

        jBTautores.setBackground(new java.awt.Color(255, 255, 255));
        jBTautores.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        jBTautores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgImagens/autores.png"))); // NOI18N
        jBTautores.setToolTipText("Autores");
        jBTautores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTautoresActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelRealizadoPorLayout = new javax.swing.GroupLayout(jPanelRealizadoPor);
        jPanelRealizadoPor.setLayout(jPanelRealizadoPorLayout);
        jPanelRealizadoPorLayout.setHorizontalGroup(
            jPanelRealizadoPorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRealizadoPorLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jBTautores, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanelRealizadoPorLayout.setVerticalGroup(
            jPanelRealizadoPorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRealizadoPorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBTautores, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPprincipalLayout = new javax.swing.GroupLayout(jPprincipal);
        jPprincipal.setLayout(jPprincipalLayout);
        jPprincipalLayout.setHorizontalGroup(
            jPprincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPprincipalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPprincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPoutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPprincipalLayout.createSequentialGroup()
                        .addComponent(jPanelRealizadoPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jPanelRFID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelRFIDEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPprincipalLayout.createSequentialGroup()
                        .addComponent(jPanelEventoF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(121, 121, 121)
                        .addComponent(jBTsair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPprincipalLayout.setVerticalGroup(
            jPprincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPprincipalLayout.createSequentialGroup()
                .addGroup(jPprincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelRFID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelRealizadoPor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelRFIDEvento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPoutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPprincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelEventoF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBTsair, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPprincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 625, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPprincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBTautoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTautoresActionPerformed
        jDautores.setLocationRelativeTo(this);
        jDautores.setVisible(true);
    }//GEN-LAST:event_jBTautoresActionPerformed

    private void jBTsairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTsairActionPerformed
        int confirma = JOptionPane.showConfirmDialog(null, "Tem a certeza que pretende sair da aplicação?", "CONFIRMAÇÃO", JOptionPane.YES_NO_OPTION);
        if (confirma == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_jBTsairActionPerformed

    private void jBTokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTokActionPerformed
        jDautores.setVisible(false);
    }//GEN-LAST:event_jBTokActionPerformed

    private void jBTlistarBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTlistarBDActionPerformed
        jDlistarRFID.setLocationRelativeTo(this);
        jDlistarRFID.setVisible(true);
        LimpaTabelaConsulta();
        ConsultaRFIDS();

        //COLOCAR BOTOES ESTADO VISIVEIS
        jPanelBotoesEstados.setVisible(true);
        jButtonAtivar.setVisible(false);
        jButtonInativo.setVisible(true);
        jButtonDesvincular.setVisible(true);
        jButtonEvento.setVisible(true);
        jPanelEvento.setVisible(false);

    }//GEN-LAST:event_jBTlistarBDActionPerformed

    private void jBTvoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTvoltarActionPerformed
        jDlistarRFID.setVisible(false);
    }//GEN-LAST:event_jBTvoltarActionPerformed

    private void jTextFieldPesquisarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldPesquisarCaretUpdate
        // PESQUISAR RFID
        LimpaTabelaConsulta();
        PesquisaRFID();
    }//GEN-LAST:event_jTextFieldPesquisarCaretUpdate

    private void jBTguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTguardarActionPerformed
        // REGISTAR RFID
        String rfid = jTFrfid.getText();
        String nome = jTFnome.getText();
        String estado = jCBestado.getSelectedItem().toString();

        if (estado.equals("Escolha uma opção") || estado.equals("Desvincular")) {
            JOptionPane.showMessageDialog(jDregistar, "Seleccione um Estado Valido !\n Ativo ou Inativo");
        } else {
            NovoRFID(nome, rfid, estado);
        }


    }//GEN-LAST:event_jBTguardarActionPerformed

    private void jButtonDesvincularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDesvincularActionPerformed
        // Desvincular
        int linha = jTlistaCartoes.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDlistarRFID, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String rfid = (String) jTlistaCartoes.getValueAt(linha, 0);
            String nome = (String) jTlistaCartoes.getValueAt(linha, 1);
            //String estado = (String) jTlistaCartoes.getValueAt(linha, 2);

            String estado = jButtonDesvincular.getText();
            AlteraEstado(nome, rfid, estado);
            //Desvincular(nome, rfid);
            LimpaTabelaConsulta();
            ConsultaRFIDS();

        }


    }//GEN-LAST:event_jButtonDesvincularActionPerformed

    private void jComboBoxEstadoConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstadoConsultasActionPerformed
        // 
        jTextFieldPesquisar.setText("");
        LimpaTabelaConsulta();
        ConsultaRFIDS();

        //MOSTRAR BOTOES DE ESTADOS 
        String estadoVisivel = jComboBoxEstadoConsultas.getSelectedItem().toString();

        if (estadoVisivel == "Ativo") {
            jPanelBotoesEstados.setVisible(true);
            jButtonAtivar.setVisible(false);
            jButtonInativo.setVisible(true);
            jButtonDesvincular.setVisible(true);
        } else if (estadoVisivel == "Inativo") {
            jPanelBotoesEstados.setVisible(true);
            jButtonAtivar.setVisible(true);
            jButtonInativo.setVisible(false);
            jButtonDesvincular.setVisible(true);
        } else if (estadoVisivel == "Desvincular") {
            jPanelBotoesEstados.setVisible(false); //visualização so para historico
        }

    }//GEN-LAST:event_jComboBoxEstadoConsultasActionPerformed

    private void jButtonAtivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtivarActionPerformed
        // ATIVAT RFID
        int linha = jTlistaCartoes.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDlistarRFID, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String rfid = (String) jTlistaCartoes.getValueAt(linha, 0);
            String nome = (String) jTlistaCartoes.getValueAt(linha, 1);
            //String estado = (String) jTlistaCartoes.getValueAt(linha, 2);

            String estado = "Ativo";
            AlteraEstado(nome, rfid, estado);
            //Desvincular(nome, rfid);
            LimpaTabelaConsulta();
            ConsultaRFIDS();

        }

    }//GEN-LAST:event_jButtonAtivarActionPerformed

    private void jButtonInativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInativoActionPerformed
        // INATIVO
        int linha = jTlistaCartoes.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDlistarRFID, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String rfid = (String) jTlistaCartoes.getValueAt(linha, 0);
            String nome = (String) jTlistaCartoes.getValueAt(linha, 1);
            //String estado = (String) jTlistaCartoes.getValueAt(linha, 2);

            String estado = "Inativo";
            AlteraEstado(nome, rfid, estado);
            //Desvincular(nome, rfid);
            LimpaTabelaConsulta();
            ConsultaRFIDS();

        }
    }//GEN-LAST:event_jButtonInativoActionPerformed

    private void jBTcancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTcancelarActionPerformed
        // BOTAO CANCELAR 
        LimpaCamposRegistar();
        jDregistar.setVisible(false);

    }//GEN-LAST:event_jBTcancelarActionPerformed

    private void jBTNovoEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTNovoEventoActionPerformed
        // NOVO EVENTO 
        jDNovoEvento.setLocationRelativeTo(this);
        jDNovoEvento.setVisible(true);
    }//GEN-LAST:event_jBTNovoEventoActionPerformed

    private void jBTguardarNovoEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTguardarNovoEventoActionPerformed
        // GUARDAR NOVO EVENTO
        String nomeEvento = jTextFieldNomeEvento.getText();
        String estadoEvento = jComboBoxEstadoEvento.getSelectedItem().toString();

        if (estadoEvento.equals("Escolha uma opção")) {
            JOptionPane.showMessageDialog(jDNovoEvento, "Seleccione um Estado Valido !\n Ativo ou Inativo");
        } else {
            //VERIFICAR SE EVENTO JA EXISTE
            // VerificaEvento();
            System.out.println("ExisteEvento : " + ExisteEvento);

            //if(ExisteEvento == 0){
            NovoEvento(nomeEvento, estadoEvento);
            //}else{
            //  JOptionPane.showMessageDialog(jDNovoEvento, "Evento já Existe !");
            //  ExisteEvento = 0;
            //}

        }

    }//GEN-LAST:event_jBTguardarNovoEventoActionPerformed

    private void jBTcancelarNovoEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTcancelarNovoEventoActionPerformed
        // BOTAO FECHAR JANELA NOVO EVENTO
        jDNovoEvento.setVisible(false);
    }//GEN-LAST:event_jBTcancelarNovoEventoActionPerformed

    private void jBTvoltarEventosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTvoltarEventosActionPerformed
        // FECHAR CONSULTA EVENTOS
        jDListaEventos.setVisible(false);
    }//GEN-LAST:event_jBTvoltarEventosActionPerformed

    private void jTextFieldPesquisarEventoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextFieldPesquisarEventoCaretUpdate
        // PESQUISA EVENTOS
        LimpaTabelaEventos();
        PesquisaEventos();
    }//GEN-LAST:event_jTextFieldPesquisarEventoCaretUpdate

    private void jComboBoxEstadoConsultasEventosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEstadoConsultasEventosActionPerformed
        // ESTADOS DOS EVENTOS

        jTextFieldPesquisarEvento.setText("");

        //MOSTRAR BOTOES DE ESTADOS
        String estadoVisivel = jComboBoxEstadoConsultasEventos.getSelectedItem().toString();
        if (estadoVisivel == "Ativo") {
            jPanelBotoesEstadosEventos.setVisible(true);
            jButtonAtivarEvento.setVisible(false);
            jButtonInativoEvento.setVisible(true);
            jButtonTerminarEvento.setVisible(true);
        } else if (estadoVisivel == "Inativo") {
            jPanelBotoesEstados.setVisible(true);
            jButtonAtivarEvento.setVisible(true);
            jButtonInativoEvento.setVisible(false);
            jButtonTerminarEvento.setVisible(true);
        } else if (estadoVisivel == "Terminado") {
            jPanelBotoesEstadosEventos.setVisible(false); //visualização so para historico
        }

        //CONSULTA 
        LimpaTabelaEventos();
        ConsultarEventos();

    }//GEN-LAST:event_jComboBoxEstadoConsultasEventosActionPerformed

    private void jButtonInativoEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInativoEventoActionPerformed
        // ALTERAR ESTADO EVENTO INATIVO
        int linha = jTlistaEventos.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDListaEventos, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO

            String nome = (String) jTlistaEventos.getValueAt(linha, 0);
            //String estado = (String) jTlistaCartoes.getValueAt(linha, 2);

            String estado = "Inativo";
            AlteraEstadoEvento(nome, estado);

            LimpaTabelaEventos();
            ConsultarEventos();

        }
    }//GEN-LAST:event_jButtonInativoEventoActionPerformed

    private void jButtonTerminarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTerminarEventoActionPerformed
        // ALTERAR ESTADO EVENTO - TERMINADO
        int linha = jTlistaEventos.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDListaEventos, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO

            String nome = (String) jTlistaEventos.getValueAt(linha, 0);
            //String estado = (String) jTlistaCartoes.getValueAt(linha, 2);

            String estado = "Terminado";
            AlteraEstadoEvento(nome, estado);

            LimpaTabelaEventos();
            ConsultarEventos();

        }
    }//GEN-LAST:event_jButtonTerminarEventoActionPerformed

    private void jButtonAtivarEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtivarEventoActionPerformed
        // ATIVAR EVENTO

        int linha = jTlistaEventos.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jTlistaEventos, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO

            String nome = (String) jTlistaEventos.getValueAt(linha, 0);
            //String estado = (String) jTlistaCartoes.getValueAt(linha, 2);

            String estado = "Ativo";
            AlteraEstadoEvento(nome, estado);

            LimpaTabelaEventos();
            ConsultarEventos();

        }
    }//GEN-LAST:event_jButtonAtivarEventoActionPerformed

    private void jBTlistaEventosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTlistaEventosActionPerformed
        // LISTA EVENTOS
        jDListaEventos.setLocationRelativeTo(this);
        jDListaEventos.setVisible(true);
        LimpaTabelaEventos();
        ConsultarEventos();

        //BOTOES DE ESTADOS 
        jPanelBotoesEstadosEventos.setVisible(true);
        jButtonAtivarEvento.setVisible(false);
        jButtonInativoEvento.setVisible(true);
        jButtonTerminarEvento.setVisible(true);

    }//GEN-LAST:event_jBTlistaEventosActionPerformed

    private void jButtonEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEventoActionPerformed
        // ADICIONAR A EVENT=              
        int linha = jTlistaCartoes.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDlistarRFID, "Seleccione uma Linha !");
        } else {
            //MOSTRAR PAINEL DE EVENTO
            jPanelEvento.setVisible(true);
            rfidSeleccionado = (String) jTlistaCartoes.getValueAt(linha, 0);

            //LER OS EVENTOS PARA A COMBOBOX DOS EVENTOS
            LerEventos(jComboBoxRFIDEvento);

        }

    }//GEN-LAST:event_jButtonEventoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //ADICIONAR AO EVENTO

        String eventoSeleccionado = jComboBoxRFIDEvento.getSelectedItem().toString();

        if (eventoSeleccionado.equalsIgnoreCase("--EVENTO--")) {
            JOptionPane.showMessageDialog(jDlistarRFID, "Selecciona um Evento !");
        } else {
            //SABER O ID DO RFID
            int idRfid = selectId("RFID", "RFID", rfidSeleccionado, "IDRFID");
            System.out.println("ID_RFID_SELECCIONADO -> " + idRfid);
            //SABER O ID DO EVENTO

            int idEvento = selectId("EVENTO", "NOME", eventoSeleccionado, "IDEVENTO");
            System.out.println("ID_EVENTO_SELECCIONADO-> " + idEvento);

            //GRAVAR NA TABELA RFIDEVENTO
            NovoRFIDEvento(idRfid, idEvento);

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        //ConsultaRfidEvento();
        LerEventos(jComboBoxSeleccionaEventoConsulta);
        jDListaRDIFEvento.setLocationRelativeTo(this);
        jDListaRDIFEvento.setVisible(true);
        ConsultaRfidEvento();//LER OS DADSOS PARA A TABELA
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBoxSeleccionaEventoConsultaPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBoxSeleccionaEventoConsultaPopupMenuWillBecomeInvisible
        // JCOMBOBOX PESQUISA       
            LimpaTabelaRfidEvento();
            PesquisaRfidEvento();  
    }//GEN-LAST:event_jComboBoxSeleccionaEventoConsultaPopupMenuWillBecomeInvisible

    private void jButtonMaisInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMaisInfoActionPerformed
        // MAIS INFO RFID EVENTO
        int linha = jTableConsultaRfidEventos.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(jDListaRDIFEvento, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String nome = (String) jTableConsultaRfidEventos.getValueAt(linha, 0);

            MaisInfoRfidEvento(nome);

        }


    }//GEN-LAST:event_jButtonMaisInfoActionPerformed

    private void jButtonEditarRfidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarRfidActionPerformed
        // EDITAR RFID
        int linha = jTlistaCartoes.getSelectedRow();
        
        
        if (linha == -1) {
            JOptionPane.showMessageDialog(jTlistaCartoes, "Seleccione uma Linha !");
        } else {
            //DEVOLVE O NOME DO EQUIPAMENTO
            String rfid  = (String) jTlistaCartoes.getValueAt(linha, 0);
            nomeRFIDUpdate = (String) jTlistaCartoes.getValueAt(linha, 1);
            idRfidUpdate = selectId("RFID", "RFID", rfid, "IDRFID");
            System.out.println("IDRFID -> " + idRfidUpdate);
            
            //VAMOS ABRIR A JANELA DE NOVO RFID, E É ONDE VAMOS FAZER O UPDATE
            jDregistar.setLocationRelativeTo(this);
            jDregistar.setVisible(true);
            //ESCONDER O BOTAO NOVO RFID
            jBTguardar.setVisible(false);
            jBTAtualizar.setVisible(true);
            
            //PEQUISAR O RFID E ESCREVER OS VALORES NA JDIALOAG
            pesquisaRFIDforUpdate(idRfidUpdate);

            

        }
        
        
        
    }//GEN-LAST:event_jButtonEditarRfidActionPerformed

    private void jBTAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTAtualizarActionPerformed
        // BOTAO ATULAIZAR RFID
        
        //VERIFICAR O NOME
        String nomeAtualizado = jTFnome.getText();
        
        if (nomeAtualizado.equals(nomeRFIDUpdate)){
            //MENSAGEM A DIZER QUE O NOME É O MESMO 
            JOptionPane.showMessageDialog(jDregistar, "Nome é igual ao que estava anteriormente !");
        } else{
            //VAMOS GRAVAR O UPDATE
            UpdateRFID(nomeAtualizado);
        }
        
        
        
    }//GEN-LAST:event_jBTAtualizarActionPerformed

    private void jBTvoltarRFIDEventoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTvoltarRFIDEventoActionPerformed
        // FECHAR JANELA RFID EVENTO
        jDListaRDIFEvento.setVisible(false);
    }//GEN-LAST:event_jBTvoltarRFIDEventoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeGestao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeGestao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeGestao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceDeGestao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceDeGestao().setVisible(true);
            }
        });
    }

    public void accao(String str) {
        jLBLmsgVerifica.setText(str);

        String rfid = str;
        System.out.println("TAMANHO STRING -  APLICAÇÃO\n " + rfid.length());
        
        //VERIFICAR SE EXISTE NA BASE DE DADOS
        if (rfid.length() == 14) {
            verificaRFID(str);
        }
    }

    /*CRIAR NOVO*/
    private void NovoRFID(String nome, String rfid, String estado) {

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            sql = "INSERT INTO " + nomeTabela + "(NOME,ESTADO,RFID)" + " values(" + "'" + nome + "','" + estado + "','" + rfid + "'" + ")";
            System.out.println("INSERT INTO " + nomeTabela + "(NOME,ESTADO,RFID)" + " values(" + "'" + nome + "','" + estado + "','" + rfid + "'" + ")");

            JOptionPane.showMessageDialog(jDregistar, "ADICIONADO !");
            //FECHAR A JANELA DE REGISTAR E LIMPAR OS CAMPOS
            jDregistar.setVisible(false);
            LimpaCamposRegistar();

           // ATUALIZA LOGO A TABELA DE CONSULTA(EM CASA DE ESTAR ABERTA)
            // LimpaTabelaConsulta();
            // ConsultaRFIDS();
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    /*LIMPAR CAMPOS DO REGISTAR */
    private void LimpaCamposRegistar() {
        jTFrfid.setText("");
        jTFnome.setText("");
        jCBestado.setSelectedIndex(0);

    }
    /*CONSULTAR RFID's*/
    private void ConsultaRFIDS() {
        int idRegisto = 0;
        String nome = "";
        String rfid = "";
        String estado = "";
        int contaLinhas = 0;

        String estadoConulta = jComboBoxEstadoConsultas.getSelectedItem().toString();
        //System.out.println("ESTADO_CONSULTA -> " + estadoConulta);

        model = (DefaultTableModel) jTlistaCartoes.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            String sql = "SELECT * FROM " + nomeTabela + " where ESTADO = '" + estadoConulta + "'";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {

                idRegisto = rs.getInt("IDRFID");

                nome = rs.getString("NOME");

                rfid = rs.getString("RFID");

                //estado = rs.getString("ESTADO");
                model.addRow(new Object[]{rfid, nome});
                contaLinhas++;
            }

            //MESNGEM DE SE EXISTE OU NAO VALORES A APRESENTAR
            if (contaLinhas == 0) {
                JOptionPane.showMessageDialog(jDlistarRFID, "O estado " + estadoConulta + " esta vazio !");
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

    }
    /*LIMPA TABELA CONSULTA*/
    private void LimpaTabelaConsulta() {
        DefaultTableModel model = (DefaultTableModel) jTlistaCartoes.getModel();
        int linhas = model.getRowCount();

        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    /*PESQUISAR RFID*/
    private void PesquisaRFID() {

        String nome = "";
        String rfid = "";
        int contaLinhas = 0;

        String pesquisa = jTextFieldPesquisar.getText();
        System.out.println("PESQUISA -> " + pesquisa);
        String estadoConsulta = jComboBoxEstadoConsultas.getSelectedItem().toString();

        model = (DefaultTableModel) jTlistaCartoes.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            sql = "select * from " + nomeTabela + " where (NOME like '%" + pesquisa + "%') AND ESTADO='" + estadoConsulta + "'";
            System.out.println("select * from " + nomeTabela + " where (NOME like '%" + pesquisa + "%') AND ESTADO=" + estadoConsulta);

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                nome = rs.getString("NOME");
                rfid = rs.getString("RFID");
               // estado = rs.getString("ESTADO");

                //guardar dados num arraylist e adicionalos a tabela
                model.addRow(new Object[]{rfid, nome});
                contaLinhas++;
            }

            //MESNGEM DE SE EXISTE OU NAO VALORES A APRESENTAR
            if (contaLinhas == 0) 
            {
                JOptionPane.showMessageDialog(jDlistarRFID, "O estado " + estadoConsulta + " esta vazio !");
               
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

    }
    /*VERIFICA SE JA EXISTE O RFID NA BASE DE DADOS*/
    private void verificaRFID(String rfid) {

        //DADOS PARA SEREM LIDO
        String nome = "";
        String rfidNome = "";

        int conta = 0;
        String estado = "Ativo"; // estado onde estamos a procurar
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            sql = "select * from " + nomeTabela + " where (RFID like '" + rfid + "') AND ESTADO='" + estado + "'";
            //sql = "select * from " + nomeTabela + " where RFID ='" + rfid + "'";                             

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                nome = rs.getString("NOME");
                rfidNome = rs.getString("RFID");
                conta++;
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        if (conta == 0) {
            int resultadoRFID = JOptionPane.showConfirmDialog(this, "RFID ainda não Existe ! \nDeseja Adiciona-lo", "RFID NÃO REGISTADO", JOptionPane.YES_NO_OPTION);

            if (resultadoRFID == JOptionPane.YES_OPTION) {
                jDregistar.setLocationRelativeTo(this);
                jDregistar.setVisible(true);

                //escrever RFID
                jTFrfid.setText(jLBLmsgVerifica.getText());

                //LIGA LED VERDE
                LedQueLigamos = 2;
            }else{
                //LIGA O LED VERDE
                LedQueLigamos = 2;
                jLBLmsgVerifica.setText("POR FAVOR, PASSE O CARTÃO...");
            }
                

        } else {
            JOptionPane.showMessageDialog(this, "O RFID " + rfidNome + " já existe !\nAtribuido a:\n" + nome);

            //COR DA LABLE
            //jLBLmsgVerifica.setOpaque(true);
            //jLBLmsgVerifica.setBackground(Color.RED);
                      
          
             //VOTLA A ESCREVER A MENSAGEM NA LABLE
             jLBLmsgVerifica.setText("POR FAVOR, PASSE O CARTÃO...");
             //LIGA LED VERMELHO
             LedQueLigamos = 1;
             
        }

    }
    /*ALTERAR O ESTADO DE UM RFID*/
    private void AlteraEstado(String nome, String rfid, String estado) {

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";

            String sql = "UPDATE " + nomeTabela + " SET ESTADO='" + estado + "' WHERE NOME='" + nome + "' and RFID='" + rfid + "'";

            System.out.println("ESTADO MATERIA-PRIMA ALTERADO COM SUCESSO : " + estado);
            System.out.println("Nome -> " + nome);
            System.out.println("RFID -> " + rfid);

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    /*GUARDA NOVO EVENTO*/
    private void NovoEvento(String nome, String estado) {
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "EVENTO";
            sql = "INSERT INTO " + nomeTabela + "(NOME,ESTADO)" + " values(" + "'" + nome + "','" + estado + "')";
            System.out.println("INSERT INTO " + nomeTabela + "(NOME,ESTADO,RFID)" + " values(" + "'" + nome + "','" + estado + "')");

            JOptionPane.showMessageDialog(jDNovoEvento, "ADICIONADO !");
            //FECHAR A JANELA DE REGISTAR E LIMPAR OS CAMPOS
            jDregistar.setVisible(false);
            LimpaCamposRegistar();

           // ATUALIZA LOGO A TABELA DE CONSULTA(EM CASA DE ESTAR ABERTA)
            // LimpaTabelaConsulta();
            // ConsultaRFIDS();
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    /*CONSULTAR EVENTOS */
    private void ConsultarEventos() {

        String nome = "";
        int contaLinhas = 0;

        String estadoConsulta = jComboBoxEstadoConsultasEventos.getSelectedItem().toString();
        //System.out.println("ESTADO_CONSULTA -> " + estadoConulta);

        model = (DefaultTableModel) jTlistaEventos.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "EVENTO";
            String sql = "SELECT * FROM " + nomeTabela + " where ESTADO = '" + estadoConsulta + "'";
            System.out.println("CONSULTA_ EVENTO-> SELECT * FROM " + nomeTabela + " where ESTADO = '" + estadoConsulta + "'");
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {

                //idRegisto = rs.getInt("IDREGISTO");
                nome = rs.getString("NOME");

               // rfid = rs.getString("RFID");
                //estado = rs.getString("ESTADO");
                model.addRow(new Object[]{nome});
                contaLinhas++;
            }
            if (contaLinhas == 0) {
                JOptionPane.showMessageDialog(jDListaEventos, "O estado " + estadoConsulta + " esta vazio !");
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

    }
    /*LIMPA TABELA EVENTOS*/
    private void LimpaTabelaEventos() {
        DefaultTableModel model = (DefaultTableModel) jTlistaEventos.getModel();
        int linhas = model.getRowCount();

        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    /*PESQUISA EVENTOS*/
    private void PesquisaEventos() {

        String nome = "";
        int contaLinhas = 0;

        String pesquisa = jTextFieldPesquisarEvento.getText();
        System.out.println("PESQUISA -> " + pesquisa);
        String estadoConsulta = jComboBoxEstadoConsultasEventos.getSelectedItem().toString();

        model = (DefaultTableModel) jTlistaEventos.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "EVENTO";
            sql = "select * from " + nomeTabela + " where (NOME like '%" + pesquisa + "%') AND ESTADO='" + estadoConsulta + "'";
            System.out.println("select * from " + nomeTabela + " where (NOME like '%" + pesquisa + "%') AND ESTADO=" + estadoConsulta);

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                nome = rs.getString("NOME");

               // estado = rs.getString("ESTADO");
                //guardar dados num arraylist e adicionalos a tabela
                model.addRow(new Object[]{nome});
                contaLinhas++;
            }

            //MESNGEM DE SE EXISTE OU NAO VALORES A APRESENTAR
            if (contaLinhas == 0) {
                //jTextFieldPesquisarEvento.setText(""); //LIMPAR TEXTFIEL DE PESQUISA
                JOptionPane.showMessageDialog(jDListaEventos, "O estado " + estadoConsulta + " esta vazio !");

            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

    }
    /*ALTERA ESTADO EVENTO*/
    private void AlteraEstadoEvento(String nome, String estado) {
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "EVENTO";

            String sql = "UPDATE " + nomeTabela + " SET ESTADO='" + estado + "' WHERE NOME='" + nome + "'";

            System.out.println("ESTADO EVENTO COM SUCESSO : " + estado);
            System.out.println("NOME -> " + nome);

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    /*GRAVAR O RFID EVENTO*/
    private void NovoRFIDEvento(int idrfid, int idEvento) {
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFIDEVENTO";
            sql = "INSERT INTO " + nomeTabela + "(IDRFID,IDEVENTO)" + " values(" + idrfid + "," + idEvento + ")";
            System.out.println("INSERT INTO " + nomeTabela + "(IDRFID,IDEVENTO)" + " values(" + idrfid + "," + idEvento + ")");

            JOptionPane.showMessageDialog(jDlistarRFID, "ADICIONADO AO EVENTO !");

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

    }
    /*LIMPA TABELA RFID EVENTO*/
    private void LimpaTabelaRfidEvento() {
        DefaultTableModel model = (DefaultTableModel) jTableConsultaRfidEventos.getModel();
        int linhas = model.getRowCount();

        for (int i = 0; i < linhas; i++) {
            model.removeRow(0);
        }
    }
    /*CONSULTA DE RFID EVENTO*/
    private void ConsultaRfidEvento() {

        int idRFID = 0;

        int idRfidPesquisa = 0;
        int idEventoPesquisa = 0;
        String rfid = "";
        int contaLinhas = 0;

       //idRfidPesquisa = selectId2("RFID", "NOME", pesquisa, "IDRFID");
        //idEventoPesquisa = selectId("EVENTO", "NOME", evento, "IDEVENTO");
       //System.out.println("PESQUISA : " + pesquisa);
        //System.out.println("IDRFID_PESQUISA : " + idRfidPesquisa);
        System.out.println("IDEVENTO_PESQUISA : " + idEventoPesquisa);

        model = (DefaultTableModel) jTableConsultaRfidEventos.getModel();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {

            con = DriverManager.getConnection(url);
            String nomeTabela = "RFIDEVENTO";
            String sql = "SELECT * FROM " + nomeTabela;//+ " where IDEVENTO = "+idEventoPesquisa;

            System.out.println("SELECT * FROM " + nomeTabela + " where (IDRFID = " + idRfidPesquisa + " AND IDEVENTO = " + idEventoPesquisa + ")");

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {

                idRFID = rs.getInt("IDRFID");
                String nome = selectString("RFID", "IDRFID", idRFID, "NOME");
                System.out.println("NOME_RFIDEVENTO: " + nome);
                //estado = rs.getString("ESTADO");

                model.addRow(new Object[]{nome});
                contaLinhas++;
            }

            //MESNGEM DE SE EXISTE OU NAO VALORES A APRESENTAR
//            if (contaLinhas == 0)
//            {
//                JOptionPane.showMessageDialog(jDlistarRFID, "O estado " + estadoConulta +" esta vazio !");
//            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    /*PESQUISA RFID EVENTO*/
    private void PesquisaRfidEvento() {
        int rfidTabela = 0;
        String nome = "";
        int contaLinhas = 0;

        String evento = jComboBoxSeleccionaEventoConsulta.getSelectedItem().toString();

        if (evento.equals("--EVENTO--")) {
            System.out.println("------- PESQUISAR TODOS OS CAMPOS ---------- ");
            LimpaTabelaEventos();
            ConsultaRfidEvento();
        } else {

            //VERIFICAR O QUE VEM NO EVENTO
            //CONVERTER OS NOME PARA ID'S
            int idEventoPesquisa = selectId("EVENTO", "NOME", evento, "IDEVENTO");

            System.out.println("EVENTO : " + evento);
            System.out.println("ID PESQUISA : " + idEventoPesquisa);

            model = (DefaultTableModel) jTableConsultaRfidEventos.getModel();

            try {
                Class.forName("org.apache.derby.jdbc.ClientDriver");
            } catch (ClassNotFoundException e) { //driver não encontrado
                System.err.print("ClassNotFoundException: ");
                System.err.println(e.getMessage());
                System.out.println("O driver expecificado nao foi encontrado.");
            }

            try {
                con = DriverManager.getConnection(url);
                String nomeTabela = "RFIDEVENTO";
                sql = "select * from " + nomeTabela + " where IDEVENTO = " + idEventoPesquisa;
                System.out.println("select * from " + nomeTabela + " where IDEVENTO = " + idEventoPesquisa);

                PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                while (rs.next()) {

                    rfidTabela = rs.getInt("IDRFID");
                    nome = selectString("RFID", "IDRFID", rfidTabela, "NOME");

                    //guardar dados num arraylist e adicionalos a tabela
                    model.addRow(new Object[]{nome});
                    contaLinhas++;
                }

                //MESNGEM DE SE EXISTE OU NAO VALORES A APRESENTAR
                if (contaLinhas == 0) {
                    JOptionPane.showMessageDialog(jDlistarRFID, "O evento " + evento + " esta vazio !");
                }

                st.close();
                con.close();
            } catch (SQLException ex) {
                System.err.println("SQLException: " + ex.getMessage());
            }
        }
    }
    /*RFID EVENTO MORE INFO*/
    private void MaisInfoRfidEvento(String nome) {

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            sql = "select * from " + nomeTabela + " where NOME like '" + nome + "'";
            System.out.println("select * from " + nomeTabela + " where NOME like '" + nome + "'");

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                String rfid = rs.getString("RFID");

                JOptionPane.showMessageDialog(jDlistarRFID, "Nome \n" + nome + "\n\nRFID\n" + rfid);

            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }
    /*LER EVENTOS PARA AS COMBBOBOX DE EVENTOS*/
    private void LerEventos(JComboBox nomeCombobox) {
        //LIMPAR A COMBO
        nomeCombobox.removeAllItems();
        //CARREGAR DADOS
        Set<String> opcao = new HashSet<String>();
        String estadoConsulta = "Ativo";

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");

        } catch (ClassNotFoundException e) {
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            //            stmt = con.createStatement();
            String nomeTabela = "EVENTO";
            String sql = "SELECT * FROM " + nomeTabela + " where ESTADO = '" + estadoConsulta + "' ORDER by NOME DESC";
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {

                opcao.add(rs.getString("NOME"));
            }
            st.close();
            con.close();

        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        nomeCombobox.addItem("--EVENTO--");
        Iterator<String> it = opcao.iterator();
        while (it.hasNext()) {
            nomeCombobox.addItem(it.next());

        }

    }        
    /*PESQUISAR O RFID SELECIIONADO PARA UPDATE*/
    private void pesquisaRFIDforUpdate(int idRFID){
        
        String nome = "";
        String rfid = "";
        String estado = "";
        String estadoPesquisa = "Ativo";
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            sql = "select * from " + nomeTabela + " WHERE IDRFID = " + idRFID + " AND ESTADO='"+estadoPesquisa+"'";
            System.out.println("select * from " + nomeTabela + " WHERE IDRFID = " + idRFID + " AND ESTADO='"+estadoPesquisa+"'");
            
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                nome = rs.getString("NOME");
                rfid = rs.getString("RFID");

                //ESCREVER OS DADOS NA JANELA
                jTFrfid.setText(rfid);
                jTFnome.setText(nome);
                
            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
    }        
    /*EDITAR INFORMACAO DE UM RFID*/
    private void UpdateRFID (String nome){
        //VERIFICAR SE O NOME É O MESMO QUE ESTAVA
         
        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            String sql = "UPDATE " + nomeTabela + " SET NOME='" + nome + "' WHERE IDRFID=" + idRfidUpdate;
            System.out.println("UPDATE " + nomeTabela + " SET NOME='" + nome + "' WHERE IDRFID=" + idRfidUpdate);
            
            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            st.executeUpdate();
            
            //FECHAMOS A JANELA E LIMPAMOS OS CAMPOS
            jDregistar.setVisible(false);
            LimpaCamposRegistar();
            //LIMPAMOS A TABELA DE CONSULTA E VOLTAMOS A PESQUISAR
            LimpaTabelaConsulta();
            ConsultaRFIDS();
            
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        
    }
    
    /*VERIFICA SE EVENTO JA EXISTE*/
    private void VerificaEvento() {

        int contaLinhas = 0;

        String nomeEvento = jTextFieldNomeEvento.getText();

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }

        try {
            con = DriverManager.getConnection(url);
            String nomeTabela = "RFID";
            sql = "select * from " + nomeTabela + " where (NOME like '%" + nomeEvento + "%') AND (ESTADO = 'Ativo' or ESTADO = 'Inativo')";
            System.out.println("select * from " + nomeTabela + " where (NOME like '%" + nomeEvento + "%') AND (ESTADO = 'Ativo' or ESTADO = 'Inativo')");

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {

                contaLinhas++;

            }

            System.out.println("CONTA_LINHAS_EVENTO -> " + contaLinhas);
            //MESNGEM DE SE EXISTE OU NAO VALORES A APRESENTAR
            if (contaLinhas != 0) {
                ExisteEvento = 1; //EVENTO JA EXISTE    

            }

            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

    }
        
    
    
//    public void EscreveEstadoDaMaquinaEstados(String estado){
//        
//        String antigo = jTextAreaMaquinaEstados.getText();
//        
//        jTextAreaMaquinaEstados.setText(antigo + estado + "\n");
//        
//    }
    
   public int LigaLed(){
       int led = 0;
       
       led = LedQueLigamos;
       if (led == 1){
           led = 1;
       }else if(led == 2){
           led = 2;
       }
             
       return led;
   }
    
    
    /*DEVOLVER O ID */
    private int selectId(String tab, String col, String cam, String colId) {
        int resultId = 0;
        String tabela = tab;
        String coluna = col;
        String campo = cam;
        String colunaId = colId;

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from " + tabela + " where " + coluna + "='" + campo + "'";

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                resultId = rs.getInt(colunaId);
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }
        return resultId;
    }
    /*DEVOLVER O NOME */
    private String selectString(String tab, String col, int cam, String colNome) {
        String resultString = "";
        String tabela = tab;
        String coluna = col;
        int campo = cam;
        String colunaNome = colNome;

        try {
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) { //driver não encontrado
            System.err.print("ClassNotFoundException: ");
            System.err.println(e.getMessage());
            System.out.println("O driver expecificado nao foi encontrado.");
        }
        try {
            con = DriverManager.getConnection(url);
            sql = "select * from " + tabela + " where " + coluna + "=" + campo + " ";

            PreparedStatement st = (PreparedStatement) con.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                resultString = rs.getString(colunaNome);
            }
            st.close();
            con.close();
        } catch (SQLException ex) {
            System.err.println("SQLException: " + ex.getMessage());
        }

        return resultString;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBTAtualizar;
    private javax.swing.JButton jBTNovoEvento;
    private javax.swing.JButton jBTautores;
    private javax.swing.JButton jBTcancelar;
    private javax.swing.JButton jBTcancelarNovoEvento;
    private javax.swing.JButton jBTguardar;
    private javax.swing.JButton jBTguardarNovoEvento;
    private javax.swing.JButton jBTlistaEventos;
    private javax.swing.JButton jBTlistarBD;
    private javax.swing.JButton jBTok;
    private javax.swing.JButton jBTsair;
    private javax.swing.JButton jBTvoltar;
    private javax.swing.JButton jBTvoltarEventos;
    private javax.swing.JButton jBTvoltarRFIDEvento;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonAtivar;
    private javax.swing.JButton jButtonAtivarEvento;
    private javax.swing.JButton jButtonDesvincular;
    private javax.swing.JButton jButtonEditarRfid;
    private javax.swing.JButton jButtonEvento;
    private javax.swing.JButton jButtonInativo;
    private javax.swing.JButton jButtonInativoEvento;
    private javax.swing.JButton jButtonMaisInfo;
    private javax.swing.JButton jButtonTerminarEvento;
    private javax.swing.JComboBox jCBestado;
    private javax.swing.JComboBox jComboBoxEstadoConsultas;
    private javax.swing.JComboBox jComboBoxEstadoConsultasEventos;
    private javax.swing.JComboBox jComboBoxEstadoEvento;
    private javax.swing.JComboBox jComboBoxRFIDEvento;
    private javax.swing.JComboBox jComboBoxSeleccionaEventoConsulta;
    private javax.swing.JDialog jDListaEventos;
    private javax.swing.JDialog jDListaRDIFEvento;
    private javax.swing.JDialog jDNovoEvento;
    private javax.swing.JDialog jDRFIDEvento;
    private javax.swing.JDialog jDautores;
    private javax.swing.JDialog jDlistarRFID;
    private javax.swing.JDialog jDregistar;
    private javax.swing.JLabel jLBLanoLetivo;
    private javax.swing.JLabel jLBLestado;
    private javax.swing.JLabel jLBLfotoBruno;
    private javax.swing.JLabel jLBLfotoRafael;
    private javax.swing.JLabel jLBLmsgVerifica;
    private javax.swing.JLabel jLBLname;
    private javax.swing.JLabel jLBLnome;
    private javax.swing.JLabel jLBLnomeRafael;
    private javax.swing.JLabel jLBLnumero;
    private javax.swing.JLabel jLBLnumeroRafael;
    private javax.swing.JLabel jLBLrfid;
    private javax.swing.JLabel jLBLtitulo;
    private javax.swing.JLabel jLBLuc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelEstado;
    private javax.swing.JLabel jLabelEstadoEvento;
    private javax.swing.JLabel jLabelEvento;
    private javax.swing.JLabel jLabelNomeEvento;
    private javax.swing.JLabel jLabelProcurarEvento;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelBotoesEstados;
    private javax.swing.JPanel jPanelBotoesEstadosEventos;
    private javax.swing.JPanel jPanelEvento;
    private javax.swing.JPanel jPanelEventoF;
    private javax.swing.JPanel jPanelNovoEvento;
    private javax.swing.JPanel jPanelRFID;
    private javax.swing.JPanel jPanelRFIDEvento;
    private javax.swing.JPanel jPanelRealizadoPor;
    private javax.swing.JPanel jPanelRfidEvento;
    private javax.swing.JPanel jPautores;
    private javax.swing.JPanel jPdadosRegisto;
    private javax.swing.JPanel jPdadosalunos;
    private javax.swing.JPanel jPinformacoes;
    private javax.swing.JPanel jPinvisivel;
    private javax.swing.JPanel jPlistar;
    private javax.swing.JPanel jPlistarEventos;
    private javax.swing.JPanel jPoutput;
    private javax.swing.JPanel jPprincipal;
    private javax.swing.JPanel jPregistar;
    private javax.swing.JPanel jPtabela;
    private javax.swing.JPanel jPtabelaEventos;
    private javax.swing.JScrollPane jSPtabelaListar;
    private javax.swing.JScrollPane jSPtabelaListar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFnome;
    private javax.swing.JTextField jTFrfid;
    private javax.swing.JTable jTableConsultaRfidEventos;
    private javax.swing.JTextField jTextFieldNomeEvento;
    private javax.swing.JTextField jTextFieldPesquisar;
    private javax.swing.JTextField jTextFieldPesquisarEvento;
    private javax.swing.JTable jTlistaCartoes;
    private javax.swing.JTable jTlistaEventos;
    // End of variables declaration//GEN-END:variables
}
